"""
Django settings for gungnir project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

from __future__ import absolute_import, unicode_literals
import os
import djcelery
import datetime
import logging
	
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 's*pi-g%96o^@vg39w%u)-^!h1+z1&ci^q9haxef9tt9-=*b3$4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '.csi6220-2-vm2.ucd.ie', \
                                 'ucdgrapenews.com', 'www.ucdgrapenews.com']


AUTH_USER_MODEL = 'accounts.User'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'gungirRest',
	'dataCollector',
	'rest_framework',
	'djcelery',
    'accounts',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gungnir.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['frontend/dist'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gungnir.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'djangodb01',
        'USER': 'postgres',
        'PASSWORD': 'presqlswr123',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Dublin'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "frontend/dist/static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

from datetime import timedelta
from celery.schedules import crontab
djcelery.setup_loader()
STATIC_URL = '/static/'
BROKER_URL = 'amqp://guest:guest@localhost//'
CELERY_RESULT_BACKEND = 'amqp://guest@localhost//'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Dublin'

CELERYBEAT_SCHEDULE = {
    'add-NEWS-V1': {
        'task': 'dataCollector.tasks.flow',
        'schedule': crontab(minute=u'10', hour=u'05',),
        #'schedule': timedelta(seconds=80),
        'args': ()
    },

    'add-NEWS-V2': {
        'task': 'dataCollector.tasks.flow',
        'schedule': crontab(minute=u'10', hour=u'12', ),
        # 'schedule': timedelta(seconds=80),
        'args': ()
    },

    'add-NEWS-V3': {
        'task': 'dataCollector.tasks.flow',
        'schedule': crontab(minute=u'10', hour=u'19', ),
        # 'schedule': timedelta(seconds=80),
        'args': ()
    },
}

# Setting for Django-Python logging framework.
DJANGO_LOGGING_PATH = os.path.join(BASE_DIR, 'django_logging_files')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'standard': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'django_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(DJANGO_LOGGING_PATH, 'django_running.log'),
        },
        'django_celery_task_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': os.path.join(DJANGO_LOGGING_PATH, 'django_celery_task_running.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'django_file'],
            #'handlers': ['django_file'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'django_file'],
            #'handlers': ['django_file'],
            'level': 'WARNING',
            'propagate': True,  # False
        },
        'django.db.backends': {
            'handlers': ['console', 'django_file'],
            #'handlers': ['django_file'],
            'level': 'ERROR',
            'propagate': True,  # False
        },
        'dataCollector': {
            'handlers': ['console', 'django_celery_task_file'],
            #'handlers': ['django_celery_task_file'],
            'level': 'INFO',
            'propagate': True,
        }
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        #'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=1000),
    'JWT_AUTH_HEADER_PREFIX': 'token'
}